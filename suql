<?php

$params = getopt('', [
    'project-name:'
]);

$projectName = $params['project-name'];

$configFile = <<<FILE
<?php

return [
    'connection' => [
        'driver' => 'mysql',
        'host' => 'localhost',
        'dbname' => '',
        'user' => 'root',
        'pass' => '',
    ],
    // ... another db connection
];
FILE;

$activeGroupsFile = <<<FILE
<?php

namespace $projectName\\models;

use $projectName\\records\\ActiveRecord;
use suql\\syntax\\Field;

class ActiveGroups extends ActiveRecord
{
    public function query()
    {
        return 'active_groups';
    }

    public function table()
    {
        return 'users';
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this->join('user_group')
                ->join('groups')
                    ->select([
                        'name',
                        new Field(['name' => 'count'], [
                            'count',
                        ])
                    ])
                ->group('name');
    }
}
FILE;

$firstGroupFile = <<<FILE
<?php

namespace $projectName\\models;

use $projectName\\records\\ActiveRecord;

class FirstGroup extends ActiveRecord
{
    public function query()
    {
        return 'first_group';
    }

    public function table()
    {
        return 'groups';
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this
                ->select(['*'])
                ->limit(1);
    }
}
FILE;

$groupFile = <<<FILE
<?php

namespace $projectName\\models;

use $projectName\\records\\ActiveRecord;

class Group extends ActiveRecord
{
    public function table()
    {
        return 'groups';
    }

    public function fields()
    {
        return [
            'name',
        ];
    }
}
FILE;

$lastRegistrationFile = <<<FILE
<?php

namespace $projectName\\models;

use $projectName\\records\\ActiveRecord;
use suql\\syntax\\Field;

class LastRegistration extends ActiveRecord
{
    public function query()
    {
        return 'last_registration';
    }

    public function table()
    {
        return 'users';
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return \$this->select([
            new Field(['registration' => 'lastRegistration'], [
                'max',
            ])
        ]);
    }
}
FILE;

$noNameFile = <<<FILE
<?php

namespace $projectName\\models;

use $projectName\\records\\ActiveRecord;

class NoName extends ActiveRecord
{
    public function query()
    {
        return 'no_name';
    }

    public function table()
    {
        return ActiveGroups::all();
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return \$this->select([
            'name',
            'count',
        ]);
    }
}
FILE;

$rawQueryFile = <<<FILE
<?php

namespace $projectName\\models;

use $projectName\\records\\ActiveRecord;

class RawQuery extends ActiveRecord
{
    public function query()
    {
        return 'raw_query';
    }

    public function table()
    {
        return null;
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return \$this->select([
            '2 * 2',
            "'Yuriy' as author",
        ]);
    }
}
FILE;

$unionQueryFile = <<<FILE
<?php

namespace $projectName\\models;

use suql\\syntax\\Field;
use $projectName\\records\\ActiveRecord;

class UnionQuery extends ActiveRecord
{
    public function query()
    {
        return 'union_query';
    }

    public function table()
    {
        return null;
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this->union([
                User::all()
                    ->select([
                        new Field(['registration' => 'reg_interval'], [
                            'min'
                        ])
                    ])
                    ->as('q1'),
                User::all()
                    ->select([
                        new Field(['registration' => 'reg_interval'], [
                            'max'
                        ])
                    ])
                    ->as('q2'),
            ]);
    }
}
FILE;

$userFile = <<<FILE
<?php

namespace $projectName\\models;

use $projectName\\records\\ActiveRecord;

class User extends ActiveRecord
{
    public function table()
    {
        return 'users';
    }

    public function fields()
    {
        return [];
    }
}
FILE;

$userGroupFile = <<<FILE
<?php

namespace $projectName\\models;

use suql\\syntax\\Field;
use suql\\syntax\\Raw;
use $projectName\\records\\ActiveRecord;

class UserGroup extends ActiveRecord
{
    public function table()
    {
        return 'user_group';
    }

    public function fields()
    {
        return [];
    }
}
FILE;

$userTableAliasFile = <<<FILE
<?php

namespace $projectName\\models;

use $projectName\\records\\ActiveRecord;

class UserTableAlias extends ActiveRecord
{
    public function table()
    {
        return '{{u}}';
    }

    public function fields()
    {
        return [];
    }
}
FILE;

$customModifierFile = <<<FILE
<?php

namespace $projectName\\modifiers;

use suql\\modifier\\field\\SQLCaseModifier;

class CustomModifier extends SQLCaseModifier
{
    public static function mod_custom_one(\$ofield, \$params)
    {
        // ... Code here
    }
}
FILE;

$activeRecordFile = <<<FILE
<?php

namespace $projectName\\records;

use suql\\syntax\\SuQL;
use $projectName\\modifiers\\CustomModifier;
use suql\\db\\Container;

abstract class ActiveRecord extends SuQL
{
    protected static \$schemeClass = '$projectName\\\\schema\\\\AppScheme';
    protected static \$builderClass = 'suql\\\\builder\\\\MySQLBuilder';

    protected function modifierList()
    {
        return array_merge(
            parent::modifierList(),
            [
                CustomModifier::class,
            ]
        );
    }

    public function getDb()
    {
        return Container::get('connection');
    }
}
FILE;

$appSchemeFile = <<<FILE
<?php

namespace $projectName\\schema;

use suql\\core\\Scheme;

class AppScheme extends Scheme
{
    function __construct()
    {
        \$this->addTableList([
            'users' => 'u',
            'user_group' => 'ug',
            'groups' => 'g',
        ]);

        // Связь между реальными таблицами в базе данных
        \$this->rel('{{u}}', '{{ug}}', '{{u}}.id = {{ug}}.user_id');
        \$this->rel('{{ug}}', '{{g}}', '{{ug}}.group_id = {{g}}.id');

        // Связи с абстрактными вьюхами
        \$this->rel('users', 'last_registration', 'users.registration = last_registration.lastRegistration');
        \$this->rel('user_group', 'first_group', 'user_group.group_id = first_group.id');
    }
}
FILE;

mkdir($projectName, 0700);

mkdir("$projectName/config", 0700);
file_put_contents("$projectName/config/db.php", $configFile);

mkdir("$projectName/models", 0700);
file_put_contents("$projectName/models/ActiveGroups.php", $activeGroupsFile);
file_put_contents("$projectName/models/FirstGroup.php", $firstGroupFile);
file_put_contents("$projectName/models/Group.php", $groupFile);
file_put_contents("$projectName/models/LastRegistration.php", $lastRegistrationFile);
file_put_contents("$projectName/models/NoName.php", $noNameFile);
file_put_contents("$projectName/models/RawQuery.php", $rawQueryFile);
file_put_contents("$projectName/models/UnionQuery.php", $unionQueryFile);
file_put_contents("$projectName/models/User.php", $userFile);
file_put_contents("$projectName/models/UserGroup.php", $userGroupFile);
file_put_contents("$projectName/models/UserTableAlias.php", $userTableAliasFile);

mkdir("$projectName/modifiers", 0700);
file_put_contents("$projectName/modifiers/CustomModifier.php", $customModifierFile);

mkdir("$projectName/records", 0700);
file_put_contents("$projectName/records/ActiveRecord.php", $activeRecordFile);

mkdir("$projectName/schema", 0700);
file_put_contents("$projectName/schema/AppScheme.php", $appSchemeFile);