<?php

/**
 * Автогенерация проектов и моделей
 * 
 * @author sagittaracc <sagittaracc@gmail.com>
 */

require 'vendor/autoload.php';

use sagittaracc\StringHelper;

/**
 * Шаблон конфигурации
 */
$configFile = <<<FILE
<?php

return [
    'connection' => [
        'driver' => 'mysql',
        'host' => 'localhost',
        'dbname' => '{{dbname}}',
        'user' => 'root',
        'pass' => '',
    ],
    // ... another db connection
];
FILE;
/**
 * Шаблон ActiveRecord
 */
$activeRecordFile = <<<FILE
<?php

namespace {{projectName}}\\records;

use suql\\syntax\\SuQL;
use {{projectName}}\\modifiers\\CustomModifierExample;
use suql\\db\\Container;

abstract class ActiveRecord extends SuQL
{
    protected static \$schemeClass = '{{projectName}}\\\\schema\\\\AppScheme';
    protected static \$builderClass = 'suql\\\\builder\\\\MySQLBuilder';

    public function create()
    {
        return [];
    }

    protected function modifierList()
    {
        return array_merge(
            parent::modifierList(),
            [
                CustomModifierExample::class,
            ]
        );
    }

    public function getDb()
    {
        return Container::get('connection');
    }
}
FILE;
/**
 * Шаблон описания схемы
 */
$appSchemeFile = <<<FILE
<?php

namespace {{projectName}}\\schema;

use suql\\core\\Scheme;

class AppScheme extends Scheme
{
    function __construct()
    {
        // \$this->addTableList([
        //     'users' => 'u',
        //     'user_group' => 'ug',
        //     'groups' => 'g',
        // ]);

        // \$this->rel('{{u}}', '{{ug}}', '{{u}}.id = {{ug}}.user_id');
        // \$this->rel('{{ug}}', '{{g}}', '{{ug}}.group_id = {{g}}.id');
    }
}
FILE;
/**
 * Шаблон примера кастомного модификатора
 */
$customModifierExampleFile = <<<FILE
<?php

namespace {{projectName}}\\modifiers;

class CustomModifierExample
{
    public static function mod_modifierName(\$ofield, \$params)
    {
        // ... Code here
    }
}
FILE;
/**
 * Шаблон модели
 */
$modelFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use {{projectName}}\\records\\ActiveRecord;

class {{className}} extends ActiveRecord
{
    public function table()
    {
        return '{{modelName}}';
    }

    public function fields()
    {
        return [];
    }
}
FILE;
/**
 * Шаблон представления
 */
$viewFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use {{projectName}}\\records\\ActiveRecord;
use suql\\syntax\\Field;

class {{className}} extends ActiveRecord
{
    public function query()
    {
        return '{{modelName}}';
    }

    public function table()
    {
        return '{{table}}';
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this
                ->join('another_table')
                    ->select([
                        'field_name',
                        new Field(['another_field_name' => 'alias_for_it'], [
                            'modifier_name',
                        ])
                    ]);
    }
}
FILE;
/**
 * Шаблон подзапроса
 */
$subFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use {{projectName}}\\records\\ActiveRecord;

class {{className}} extends ActiveRecord
{
    public function query()
    {
        return '{{modelName}}';
    }

    public function table()
    {
        return InnerQueryModel::all();
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this
                ->select([
                    'field_name',
                    'another_field_name',
                ]);
    }
}
FILE;
/**
 * Шаблон сырого запроса
 */
$rawFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use {{projectName}}\\records\\ActiveRecord;

class {{className}} extends ActiveRecord
{
    public function query()
    {
        return '{{modelName}}';
    }

    public function table()
    {
        return null;
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this
                ->select([
                    '2 * 2',
                    "'Yuriy' as author",
                ]);
    }
}
FILE;
/**
 * Шаблон union запроса
 */
$unionFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use suql\\syntax\\Field;
use {{projectName}}\\records\\ActiveRecord;

class {{className}} extends ActiveRecord
{
    public function query()
    {
        return '{{modelName}}';
    }

    public function table()
    {
        return null;
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this->union([
                OneModel::all()
                    ->select([
                        new Field(['field_name' => 'alias_for_it'], [
                            'modifier_name'
                        ])
                    ])
                    ->as('alias_for_this_query'),
                AnotherModel::all()
                    ->select([
                        new Field(['field_name' => 'alias_for_it'], [
                            'modifier_name'
                        ])
                    ])
                    ->as('alias_for_this_query'),
            ]);
    }
}
FILE;
/**
 * Шаблон entry point
 */
$entryPointFile = <<<FILE
<?php

use {{projectName}}\\models\\{{className}};
use suql\\db\\Container;

require 'vendor/autoload.php';

// Connect to the database
Container::create(require __DIR__ . '/{{projectName}}/config/db.php');

// Fetch data from the database
\$data = {{className}}::all()->fetchAll();

echo "<pre>";
print_r(\$data);
echo "</pre>";
FILE;

function echoHelp()
{
    echo "Create a project\n";
    echo "> php suql --create-project --name <project-name>\n\n";

    echo "Create an entry point\n";
    echo "> php suql --create-entry-point --name <entry-point-name> --model <project-name>\<model-name>\n\n";

    echo "Create a model\n";
    echo "> php suql --create-model --name <project-name>\<model-name> --type <model-type>\n\n";

    echo "Available model types:\n";
    echo "\tmodel\n";
    echo "\tview\n";
    echo "\tsub\n";
    echo "\traw\n";
    echo "\tunion\n";

    return 0;
}

function createFolderStructure($projectName)
{
    mkdir($projectName, 0700);
    mkdir("$projectName/config", 0700);
    mkdir("$projectName/models", 0700);
    mkdir("$projectName/modifiers", 0700);
    mkdir("$projectName/records", 0700);
    mkdir("$projectName/schema", 0700);

    autoload($projectName);

    return 0;
}

function autoload($projectName)
{
    $composerJson = json_decode(file_get_contents('composer.json'), true);
    $composerJson['autoload']['classmap'][] = "$projectName/";
    file_put_contents('composer.json', json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
}

function copyMainFiles($projectName, $dbname)
{
    global $configFile, $activeRecordFile, $appSchemeFile, $customModifierExampleFile;

    file_put_contents("$projectName/config/db.php", str_replace('{{dbname}}', $dbname, $configFile));
    file_put_contents("$projectName/records/ActiveRecord.php", str_replace('{{projectName}}', $projectName, $activeRecordFile));
    file_put_contents("$projectName/schema/AppScheme.php", str_replace('{{projectName}}', $projectName, $appSchemeFile));
    file_put_contents("$projectName/modifiers/CustomModifierExample.php", str_replace('{{projectName}}', $projectName, $customModifierExampleFile));

    return 0;
}

function createModel($projectName, $modelName, $modelType)
{
    global $modelFile, $viewFile, $subFile, $rawFile, $unionFile;

    $className = StringHelper::caseDivided($modelName);
    $search = ['{{projectName}}', '{{modelName}}', '{{className}}'];
    $replace = [$projectName, $modelName, $className];
    $tpls = [
        'model' => $modelFile,
        'view' => $viewFile,
        'sub' => $subFile,
        'raw' => $rawFile,
        'union' => $unionFile,
    ];
    $file = $tpls[$modelType];

    file_put_contents("$projectName/models/$className.php", str_replace($search, $replace, $file));
    shell_exec('composer dump-autoload');
}

function createEntryPoint($projectName, $modelName, $entryName)
{
    global $entryPointFile;

    $className = StringHelper::caseDivided($modelName);

    file_put_contents("$entryName.php", str_replace(['{{projectName}}', '{{className}}'], [$projectName, $className], $entryPointFile));
}

function main()
{
    $params = getopt('', [
        'help',                     // Показать help
        'create-project',           // Создать новый проект
        'create-model',             // Создать новую модель
        'create-entry-point',       // Создать новую точку входа
        'name:',                    // Название создаваемой сущности
        'type:',                    // Тип создаваемой сущности
        'model:',                   // Название модели
        'db:',                      // Название базы данных
    ]);

    if (isset($params['help'])) {

        return echoHelp();

    }

    if (isset($params['create-project'])) {

        $projectName = $params['name'];
        $dbname = $params['db'];
        createFolderStructure($projectName);
        copyMainFiles($projectName, $dbname);

    }
    else if (isset($params['create-model'])) {

        list($projectName, $modelName) = explode('\\', $params['name']);
        $modelType = $params['type'];
        createModel($projectName, $modelName, $modelType);

    }
    else if (isset($params['create-entry-point'])) {

        $entryName = $params['name'];
        list($projectName, $modelName) = explode('\\', $params['model']);
        createEntryPoint($projectName, $modelName, $entryName);

    }
}

main();