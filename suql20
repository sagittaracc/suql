#!/usr/bin/env php
<?php

/**
 * Автогенерация проектов и моделей
 *
 * @author sagittaracc <sagittaracc@gmail.com>
 */

use suql\db\Container;
use suql\syntax\Query;

require 'vendor/autoload.php';

function main()
{
    keepAppStructure();

    if (!databaseExists()) {
        echo "\033[31mNo database was created! Create? [y\\n]: ";
        $answer = readline();
        
        if ($answer === 'y') {
            echo "\033[96mDatabase name: ";
            $dbname = readline();
            if ($dbname) {
                echo "\033[93mCreating a database... ";
                createDatabase($dbname);
                echo "\033[92mOK\n";
            }
            else {
                goto end;
            }
        }
        else {
            goto end;
        }
    }

    echo "\033[0mWhat do you want to create? [model, table]: ";
    $objectToCreate = readline();

    end:
}

function keepAppStructure()
{
    safe_mkdir('./config', 0700);
    safe_mkdir('./models', 0700);
    safe_mkdir('./modifiers', 0700);
    safe_mkdir('./records', 0700);
    safe_mkdir('./schema', 0700);

    global $configFile, $activeRecordFile, $appSchemeFile, $customModifierExampleFile;

    safe_file_put_contents('./records/ActiveRecord.php', $activeRecordFile);
    safe_file_put_contents('./schema/AppScheme.php', $appSchemeFile);
    safe_file_put_contents('./modifiers/CustomModifierExample.php', $customModifierExampleFile);
}

function databaseExists()
{
    return file_exists('./config/db.php');
}

function createDatabase($dbname)
{
    global $configFile;

    safe_file_put_contents('./config/db.empty.php', str_replace('{{dbname}}', '', $configFile));
    safe_file_put_contents('./config/db.php', str_replace('{{dbname}}', $dbname, $configFile));

    Container::create(require "./config/db.empty.php");
    Query::create("create database if not exists $dbname")->setConnection('connection')->exec();
    unlink("./config/db.empty.php");
}

function safe_mkdir($dir)
{
    is_dir($dir) || mkdir($dir, 0700);
}

function safe_file_put_contents($file, $data)
{
    file_exists($file) || file_put_contents($file, $data);
}

/**
 * Шаблон конфигурации
 */
$configFile = <<<FILE
<?php

return [
    'connection' => [
        'driver' => 'mysql',
        'host' => 'localhost',
        'dbname' => '{{dbname}}',
        'user' => 'root',
        'pass' => '',
    ],
    // ... another db connection
];
FILE;
/**
 * Шаблон ActiveRecord
 */
$activeRecordFile = <<<FILE
<?php

namespace app\\records;

use suql\\syntax\\SuQL;
use app\\modifiers\\CustomModifierExample;
use suql\\db\\Container;

abstract class ActiveRecord extends SuQL
{
    protected static \$schemeClass = 'app\\\\schema\\\\AppScheme';
    protected static \$builderClass = 'suql\\\\builder\\\\MySQLBuilder';

    public function create()
    {
        return [];
    }

    protected function modifierList()
    {
        return array_merge(
            parent::modifierList(),
            [
                CustomModifierExample::class,
            ]
        );
    }

    public function getDb()
    {
        return Container::get('connection');
    }
}
FILE;
/**
 * Шаблон описания схемы
 */
$appSchemeFile = <<<FILE
<?php

namespace app\\schema;

use suql\\core\\Scheme;

class AppScheme extends Scheme
{
    function __construct()
    {
        // \$this->addTableList([
        //     'table_1' => 't1',
        //     'table_2' => 't2',
        //     'table_3' => 't3',
        // ]);

        // \$this->rel('{{t1}}', '{{t2}}', '{{t1}}.id = {{t2}}.id');
        // \$this->rel('{{t2}}', '{{t3}}', '{{t2}}.id = {{t3}}.id');
    }
}
FILE;
/**
 * Шаблон примера кастомного модификатора
 */
$customModifierExampleFile = <<<FILE
<?php

namespace app\\modifiers;

class CustomModifierExample
{
    public static function mod_modifierName(\$ofield, \$params)
    {
        // ... Code here
    }
}
FILE;
/**
 * Шаблон модели
 */
$modelFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use {{projectName}}\\records\\ActiveRecord;

class {{className}} extends ActiveRecord
{
    public function table()
    {
        return '{{modelName}}';
    }

    public function fields()
    {
        return [];
    }
}
FILE;
/**
 * Шаблон представления
 */
$viewFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use {{projectName}}\\records\\ActiveRecord;
use suql\\syntax\\Field;

class {{className}} extends ActiveRecord
{
    public function query()
    {
        return '{{modelName}}';
    }

    public function table()
    {
        return '{{table}}';
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this
                ->join('another_table')
                    ->select([
                        'field_name',
                        new Field(['another_field_name' => 'alias_for_it'], [
                            'modifier_name',
                        ])
                    ]);
    }
}
FILE;
/**
 * Шаблон подзапроса
 */
$subFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use {{projectName}}\\records\\ActiveRecord;

class {{className}} extends ActiveRecord
{
    public function query()
    {
        return '{{modelName}}';
    }

    public function table()
    {
        return InnerQueryModel::all();
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this
                ->select([
                    'field_name',
                    'another_field_name',
                ]);
    }
}
FILE;
/**
 * Шаблон сырого запроса
 */
$rawFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use {{projectName}}\\records\\ActiveRecord;

class {{className}} extends ActiveRecord
{
    public function query()
    {
        return '{{modelName}}';
    }

    public function table()
    {
        return null;
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this
                ->select([
                    '2 * 2',
                    "'Yuriy' as author",
                ]);
    }
}
FILE;
/**
 * Шаблон union запроса
 */
$unionFile = <<<FILE
<?php

namespace {{projectName}}\\models;

use suql\\syntax\\Field;
use {{projectName}}\\records\\ActiveRecord;

class {{className}} extends ActiveRecord
{
    public function query()
    {
        return '{{modelName}}';
    }

    public function table()
    {
        return null;
    }

    public function fields()
    {
        return [];
    }

    public function view()
    {
        return
            \$this->union([
                OneModel::all()
                    ->select([
                        new Field(['field_name' => 'alias_for_it'], [
                            'modifier_name'
                        ])
                    ])
                    ->as('alias_for_this_query'),
                AnotherModel::all()
                    ->select([
                        new Field(['field_name' => 'alias_for_it'], [
                            'modifier_name'
                        ])
                    ])
                    ->as('alias_for_this_query'),
            ]);
    }
}
FILE;
/**
 * Шаблон entry point
 */
$entryPointFile = <<<FILE
<?php

use {{projectName}}\\models\\{{className}};
use suql\\db\\Container;

require 'vendor/autoload.php';

// Connect to the database
Container::create(require __DIR__ . '/{{projectName}}/config/db.php');

// Fetch data from the database
\$data = {{className}}::all()->fetchAll();

echo "<pre>";
print_r(\$data);
echo "</pre>";
FILE;

main();